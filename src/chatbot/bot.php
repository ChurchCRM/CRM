<?php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);
require '../Include/Config.php';

// This file is generated by Composer
require_once dirname(__FILE__) . '/../vendor/autoload.php';


use BotMan\BotMan\BotMan;
use BotMan\BotMan\BotManFactory;
use BotMan\BotMan\Drivers\DriverManager;
use BotMan\BotMan\Interfaces\Middleware\Received;
use Monolog\Handler\StreamHandler;
use ChurchCRM\Utils\LoggerUtils;
use ChurchCRM\Event;
use ChurchCRM\EventQuery;

$logger = LoggerUtils::getChatBotLogger();
$logger->info("Request on BotMan Listener");

try {
    require __DIR__."/ReceivedLoggerMiddleware.php";
    require __DIR__."/SendingLoggerMiddleware.php";
    DriverManager::loadDriver(\BotMan\Drivers\Slack\SlackDriver::class);

    function EventsToString()
    {
        $logger = LoggerUtils::getChatBotLogger();
        $logger->info("looking for events");
        /** @var ChurchCRM\EventQuery $events */
        $events  = EventQuery::Create()-> orderByStart() -> find();

        $strings  = [];
        $i = 0;
        foreach ($events as $event) {
            /** @var ChurchCRM\Event $event */
            $strings[$i] = "*" . $event->getTitle() . "*\n";
            $strings[$i] .= "_" . $event->getStart("m/d/Y") . "_";
            $i ++;
        }
        return implode("\n\n", $strings);
    }

    // Create BotMan instance
    $config = [
        'slack' => [
            'token' => '<YOUR SLACK TOKEN HERE>'
        ]
    ];
    $botman = BotManFactory::create($config);
   

    // Give the bot something to listen for.
    $botman->hears('hello', function (BotMan $bot) {
        // add records to the log
        $bot->replyInThread('Hello yourself.', []);
    });

    $botman->hears('I want ([0-9]+)', function ($bot, $number) {
        $bot->replyInThread('You will get: '.$number, []);
    });

    $botman->hears('(what time|when) (is).*', function (BotMan $bot) {
        $bot->replyInThread("found events:\n" . EventsToString(), []);
    });

    $botman->hears('(events|(on the)? calendar|(on the)? schedule)|(what are|what is|what(\')?s)|(this week|soon|upcoming)', function (BotMan $bot) {
        $bot->replyInThread("these are upcoming:\n" . EventsToString(), []);
    });


    $botman->fallback(function ($bot) {
        $bot->replyInThread('Sorry, I did not understand these commands. Here is a list of commands I understand: ...', []);
    });

    $middleware = new ReceivedLoggerMiddleware();
    $botman->middleware->received($middleware);


    $smiddleware = new SendingLoggerMiddleware();
    $botman->middleware->sending($smiddleware);


    // Start listening
    $botman->listen();
} catch (Exception $e) {
    $logger->info("error handling request: ".$e);
}
