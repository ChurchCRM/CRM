# This is the developer docker-compose.yml file. You can build and Run ChurchCRM
# from this file by first filling in your password and db info in the .env
# file and then running "docker-compose -f docker-compose.develop.yaml build", and
# "docker-compose -f docker-compose.develop.yaml up" in your terminal.
version: "3.8"
services:
  database:
    image: mariadb
    ports:
      - ${DEV_DATABASE_PORT:-3306}:3306
    env_file:
      - .env
    networks:
      - default
    volumes:
      - ../demo:/docker-entrypoint-initdb.d # auto-load the demo database as per: https://hub.docker.com/_/mariadb
    hostname: crm-database
    healthcheck:
      test: [ "CMD", "healthcheck.sh", "--connect", "--innodb_initialized" ]
      timeout: 20s
      retries: 10


  webserver:
    ## Look into: https://hub.docker.com/r/nimmis/apache-php7
    build:
      context: .
      dockerfile: Dockerfile.churchcrm-apache-php8-dev-debian
    image: churchcrm/crm:php8-debian-dev
    ports:
      - ${DEV_WEBSERVER_PORT:-80}:80
    volumes:
      - ../src:/var/www/html
      - ..:/home/ChurchCRM
    hostname: crm-webserver
    links:
      - database
      - mailserver
    env_file:
      - .env
    extra_hosts:
       - host.docker.internal:host-gateway
    depends_on:
      database:
        condition: service_healthy

# https://www.adminer.org/
  adminer:
    image: adminer
    environment:
      - ADMINER_DEFAULT_SERVER=database
    ports:
      - ${DEV_ADMINER_PORT:-8088}:8080
    hostname: adminer

  mailserver:
    #  Reference: https://blog.mailtrap.io/mailhog-explained/
    image: mailhog/mailhog
    ports:
      - ${DEV_MAILSERVER_PORT:-1025}:1025
      - ${DEV_MAILSERVER_GUI_PORT:-8025}:8025
    hostname: crm-hostname

