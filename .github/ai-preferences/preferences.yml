# AI Agent Preferences - ChurchCRM Development
# Used by: Claude, GitHub Copilot, and other AI coding agents
# Last Updated: 2025-10-25
# Location: .github/ai-preferences/preferences.yml

## HOW TO USE THIS FILE
## =====================
## GitHub Copilot: 
##   - Add this file path to Copilot's workspace settings
##   - In VS Code: Cmd/Ctrl + Shift + P > "Copilot: Set Custom Instructions"
##   - Paste content or reference file path
##
## Claude (via Cursor/other IDEs):
##   - Add as a context file or system prompt
##   - Reference in all new conversations
##
## Repository Documentation:
##   - Link this file in CONTRIBUTING.md
##   - Reference in GitHub issue/PR templates
##   - Include in onboarding docs for new contributors

---
## ENFORCEMENT CHECKLIST
enforcement:
  every_commit:
    - "validate_commit_message_format"
    - "check_no_raw_sql"
    - "verify_propel_orm_used"
    - "ensure_systemurls_for_assets"
  every_pr:
    - "review_communication_style"
    - "verify_service_classes_used"
    - "check_bootstrap_css_applied"
    - "validate_test_impact_documented"
  setup_required:
    - "add_pr_template: .github/pull_request_template.md"
    - "add_issue_template: .github/ISSUE_TEMPLATE/"

## Communication & Output Style
communication:
  approach: "direct_action_first"
  avoid:
    - "filler_acknowledgements"  # Skip "Sounds good", "Okay, I will..."
    - "repetitive_summaries"     # No recap unless requested
    - "verbose_explanations"     # Only when explicitly asked
  response_format: "action_then_context"
  max_preamble_lines: 1


## Commit & PR Standards
commits:
  message_format: "imperative"
  first_line_max: 72
  style: "concise"
  examples:
    - "Fix SQL injection in EditEventAttendees"
    - "Replace deprecated HTML attributes with Bootstrap CSS"
    - "Add missing element ID for test selector"
  avoid:
    - "detailed_file_lists"
    - "file_path_references_in_messages"
    - "links_to_files"

pull_requests:
  summary_max_lines: 10
  focus: "what_changed_and_why"
  include:
    - "brief_problem_statement"
    - "solution_overview"
    - "test_impact"
  skip:
    - "verbose_explanations"
    - "non_critical_details"

## Code Quality Standards
code_style:
  php:
    framework: "Propel ORM (mandatory)"
    database: "never_raw_sql"
    patterns:
      - "use Service classes for business logic"
      - "use Query classes for data access"
      - "avoid inline database logic"
    validation:
      - "run_php_lint before_committing"
      - "check syntax on_modified_files"
  javascript:
    bundler: "webpack"
    css_location: "bundled_via_webpack"
    avoid:
      - "cdn_links"
      - "external_stylesheets"

## Database & ORM Requirements
database:
  mandatory_orm: "Propel ORM"
  rules:
    - "ALWAYS use ORM Query classes"
    - "NEVER use RunQuery() with string SQL"
    - "NEVER concatenate SQL strings"
    - "Cast dynamic identifiers to (int)"
    - "Use PDO::PARAM_* for bindings"
  service_classes:
    - "GroupService"
    - "FinancialService"
    - "SystemService"
    - "TaskService"

## Slim Framework Requirements
slim_framework:
  middleware_order: "critical"
  apps_affected:
    - "src/api/index.php"
    - "src/v2/index.php"
    - "src/kiosk/index.php"
    - "src/setup/index.php"
    - "src/external/index.php"
    - "src/session/index.php"
  correct_order:
    - "$app->addBodyParsingMiddleware();"
    - "$app->addRoutingMiddleware(); // Must be BEFORE add() middleware"
    - "$app->add(VersionMiddleware::class);"
    - "$app->add(AuthMiddleware::class); // If needed"
    - "$app->add(new CorsMiddleware()); // If needed"
  why_order_matters:
    - "addRoutingMiddleware() must run BEFORE add() middleware"
    - "Routing determines which route handler processes the request"
    - "If routing runs after auth, unauthenticated requests hit handlers before auth checks"
  common_mistake:
    wrong: "$app->add(AuthMiddleware); $app->addRoutingMiddleware(); // Wrong order"
    impact: "Auth middleware cannot return 401 before routing fails"
    result: "Unauthenticated requests get 404/500 instead of 401"

## Asset & Path References
assets:
  css_bundling: "webpack_only"
  javascript_bundling: "webpack_only"
  path_function: "SystemURLs::getRootPath()"
  example:
    wrong: "href='/skin/v2/churchcrm.min.css'"
    right: "href='<?= SystemURLs::getRootPath() ?>/skin/v2/churchcrm.min.css'"
  avoid:
    - "relative_paths"
    - "dirname($_SERVER['PHP_SELF'])"
    - "cdn_links"

## HTML & CSS Modernization
html_standards:
  bootstrap_framework: "yes"
  target_standard: "HTML5"

## Testing Requirements
testing:
  automated_checks: "required_when_available"
  pre_test_protocol:
    description: "Ensure clean environment and fresh logs for accurate debugging"
    steps:
      - "Clear logs: rm -f src/logs/$(date +%Y-%m-%d)-*.log"
      - "Verify logs directory is empty before starting tests"
      - "Document any pre-test setup required (DB state, Docker restart, etc)"
    why_important:
      - "Old errors in logs can mask new failures"
      - "Fresh logs make it easier to trace test failures"
      - "Prevents debugging confusion from stale error messages"
  post_test_protocol:
    description: "Review logs to understand test failures"
    steps:
      - "After test failures, immediately review: src/logs/{date}-php.log"
      - "Check for new error messages, not just routing errors"
      - "Look for stack traces that indicate root cause"
      - "Cross-reference with test output for correlation"
    log_locations:
      php_errors: "src/logs/{date}-php.log"
      orm_queries: "src/logs/{date}-orm.log"
      app_events: "src/logs/{date}-app.log"
    best_practices:
      - "Clear logs before EVERY test run to ensure freshness"
      - "Review logs AFTER test failures before iterating"
      - "Document any new errors found in logs"
      - "Distinguish between expected errors (auth tests) and unexpected (500 errors)"
  types:
    ui:
      framework: "Cypress"
      location: "cypress/e2e/ui/**/*.spec.js"
      pattern: "describe/it with proper selectors"
      requirements:
        - "maintain element IDs for test selectors"
        - "use cy.get() for element queries"
        - "test user workflows end-to-end"
      example: "cypress/e2e/ui/events/standard.events.spec.js"
    api:
      framework: "Cypress API requests"
      location: "cypress/e2e/api/**/*.spec.js"
      pattern: "describe/it with cy.makePrivateAdminAPICall or cy.request"
      requirements:
        - "test all HTTP methods (GET, POST, PUT, DELETE)"
        - "verify type safety and data conversion"
        - "test authentication (401/403 responses)"
        - "test validation logic and error handling"
        - "verify null safety for object properties"
        - "test boundary conditions and edge cases"
      directory_structure: "api/[private|public]/[module]/"
      authentication:
        - "use cy.makePrivateAdminAPICall() for admin routes"
        - "use cy.makePrivateUserAPICall() for user routes"
        - "use cy.apiRequest() for public/unauthenticated tests"
      example: "cypress/e2e/api/private/finance/finance-payments.spec.js"
  pre_commit:
    - "verify_no_php_errors"
    - "verify_no_syntax_errors"
    - "run_relevant_api_tests_if_changed"
  output_style: "concise_summary"
  test_failure_response: "fix_or_escalate_clearly"
  api_test_checklist:
    - "type hints match actual usage (array vs object)"
    - "null safety checks on all property accesses"
    - "proper Content-Type headers for JSON requests"
    - "error responses documented and tested"
    - "authentication requirements validated"

  ## API Testing Standards
  api_tests:
    requirement: "mandatory_for_api_changes"
    when_to_write:
      - "any_changes_to_api_routes"
      - "any_changes_to_api_service_methods"
      - "adding_new_api_endpoints"
      - "fixing_api_bugs_or_errors"
    test_location: "cypress/e2e/api/private/[feature]/"
    test_naming: "[service]-[endpoint].spec.js"
    examples:
      - "cypress/e2e/api/private/finance/finance-payments.spec.js"
      - "cypress/e2e/api/private/people/people-import.spec.js"
    structure:
      - "MUST use Cypress helper commands (NEVER use cy.request directly)"
      - "include_valid_payload_tests: successful requests with correct data"
      - "include_validation_tests: test validation rules (e.g., invalid dates, missing fields)"
      - "include_error_tests: test error cases (401 auth, 400 validation, 500 server errors)"
      - "include_type_safety_tests: verify type conversions and casts work correctly"
      - "include_edge_cases: boundary conditions, null values, empty arrays"
    test_categories:
      successful_operations:
        description: "Test successful API calls with valid payloads"
        example: "POST /api/payments - Accepts properly structured payment data"
      validation_tests:
        description: "Test business logic validation (dates, funds, methods)"
        example: "POST /api/payments - Validates check method with check number"
      type_safety:
        description: "Test that type conversions don't cause runtime errors"
        example: "POST /api/payments - Type hint enforcement prevents object access errors"
      error_handling:
        description: "Test error responses (401, 400, 500)"
        example: "POST /api/payments - Requires authentication"
      security:
        description: "Test authentication and authorization"
        example: "Verify unauthenticated requests are rejected"
    cypress_commands:
      admin_api_call: 
        signature: "cy.makePrivateAdminAPICall(method, url, body, expectedStatus)"
        usage: "For admin/protected routes requiring admin API key"
        example: "cy.makePrivateAdminAPICall('POST', '/api/payments', payload, 200)"
      user_api_call: 
        signature: "cy.makePrivateUserAPICall(method, url, body, expectedStatus)"
        usage: "For protected routes requiring regular user API key"
        example: "cy.makePrivateUserAPICall('GET', '/api/payments', null, 200)"
      generic_request: 
        signature: "cy.apiRequest(options)"
        usage: "For unauthenticated/public routes or custom requests"
        example: "cy.apiRequest({method: 'POST', url: '/api/payments', failOnStatusCode: false})"
    content_type:
      requirement: "ALWAYS application/json in header"
      auto_set_by: "cy.makePrivateAdminAPICall and cy.makePrivateUserAPICall"
      manual_header: "Required only if using cy.apiRequest()"
      verification: "PHP methods should receive properly typed data"
    best_practices:
      - "Use cy.makePrivateAdminAPICall() for all admin-required endpoints"
      - "Use cy.makePrivateUserAPICall() for user-facing endpoints"
      - "Use cy.apiRequest() ONLY for public/unauthenticated routes"
      - "Test both success and failure paths"
      - "Verify type casting works (array to object)"
      - "Include null safety checks in API tests"
      - "Test all validation rules documented in the service"
      - "Use descriptive test names that explain what is being tested"
      - "Group related tests in describe blocks"
  
  ui_tests:
    requirement: "mandatory_for_ui_changes"
    when_to_write:
      - "any_visible_ui_changes"
      - "any_html_attribute_changes"
      - "adding_new_form_fields"
      - "changing_element_selectors_or_ids"
    test_location: "cypress/e2e/ui/[feature]/"
    tools:
      - "Cypress for UI automation"
      - "CSS selectors or element IDs"
      - "Data attributes for complex selectors"
  
  unit_tests:
    when_to_write:
      - "complex_business_logic"
      - "service_class_methods"
      - "utility_functions"
    location: "tests/ directory"
    framework: "phpunit"

## Documentation Standards
documentation:
  policy: "only_when_requested"
  preferences:
    - "inline_code_comments for complex logic"
    - "minimal_readme_updates"
    - "store_project_notes in ai-notes/ only"
  note_guidelines:
    - "keep_minimal: active tasks, completed items, quick patterns"
    - "do_not_create: extensive phase docs or analysis docs"
    - "ask_before_creating: 'Should this be stored?'"
  exclusions:
    - "analysis_docs"
    - "phase_summaries"
    - "extensive_reference_docs"

## Branch Naming
branches:
  format: "type/description"
  types:
    - "feature"
    - "fix"
    - "refactor"
    - "hotfix"
  style: "kebab-case"
  length: "short_but_descriptive"
  examples:
    - "fix/sql-injection-event-id"
    - "refactor/deprecated-html-attributes"
    - "feature/new-event-reporting"

## File Organization
files:
  ai_notes_directory: "ai-notes/"
  ai_notes_scope: "local_development_only"
  ai_notes_gitignore: "true"
  preferences_file: ".github/ai-preferences/preferences.yml"

## Priority Rules
rules_priority:
  - "security_first: always use Propel ORM, never raw SQL"
  - "html5_compliance: replace deprecated attributes with CSS"
  - "service_pattern: use Service classes for business logic"
  - "asset_paths: always use SystemURLs::getRootPath()"
  - "code_quality: validate before committing"
  - "clear_communication: direct, concise, actionable"

## Error Handling
errors:
  policy: "fix_immediately"
  validation:
    - "php_lint_all_modified_php_files"
    - "check_syntax_errors"
    - "test_if_available"
  escalation: "provide_actionable_error_details"

## Review Checklist (Before Commit)
pre_commit_checklist:
  - "PHP syntax validation passed"
  - "Propel ORM used for all database operations"
  - "Asset paths use SystemURLs::getRootPath()"
  - "Service classes used for business logic"
  - "Deprecated HTML attributes replaced with CSS"
  - "Bootstrap CSS classes applied correctly"
  - "Tests pass (if available)"
  - "Commit message follows imperative mood"
  - "Branch name follows kebab-case format"

## Special Instructions
special:
  test_failures:
    approach: "identify_root_cause_then_fix"
    document: "briefly_in_commit_message"
    examples:
      - "Missing element ID for test selector"
      - "Incorrect object validation logic"
      - "Unexpected redirect or page navigation"

## Version Control
git:
  commit_frequency: "atomic_logical_units"
  commit_size: "focused_single_concern"
  avoid: "massive_multi_topic_commits"
  message_detail: "minimal_but_sufficient"

## Case Study: Donation Payment 500 Error Fix (PR #7421)
## =====================================================
## Context: Type mismatch error ($payment['Date'] on object) caused 500 errors
## Session: October 25, 2025 - Multi-phase debugging and fixes
## 
## Key Learnings Applied:
critical_fixes:
  type_safety:
    description: "Propel ORM returns objects, never arrays"
    example: "Wrong: $payment['Date'] | Correct: $payment->Date"
    impact: "Type mismatches cause TypeError exceptions -> 500 errors"
    prevention: "Always validate return types from ORM Query classes"
  
  middleware_ordering:
    description: "Slim Framework middleware execution order is critical"
    position: "addRoutingMiddleware() MUST run BEFORE add() middleware calls"
    why: "Routing determines handler execution; if routing runs after auth, unauthenticated requests hit handlers"
    impact: "Wrong order: 401/403 auth responses become 500 errors"
    fixed_in: "src/api/index.php, src/v2/index.php, src/kiosk/index.php, src/setup/index.php, src/external/index.php, src/session/index.php"
  
  error_handler:
    description: "Error handlers must preserve HTTP status codes"
    issue: "registerDefaultJsonErrorHandler() was forcing 500 on all exceptions"
    fix: "Check exception type (HttpNotFoundException, HttpMethodNotAllowedException, etc) and preserve status"
    impact: "Auth failures now correctly return 401/403 instead of 500"
    file: "src/ChurchCRM/Slim/SlimUtils.php"
  
  slim4_route_handlers:
    description: "Slim 4 requires inline closures, not string callables"
    wrong: "$group->post('/path', 'functionName'); function functionName(...) {...}"
    correct: "$group->post('/path', function (...) {...});"
    why: "String callable references don't resolve in Slim 4 routing system"
    impact: "Routes not found or handlers not executed"
    fixed_in: "src/api/routes/users/user-admin.php, user-settings.php, system.php"
  
  global_function_namespace:
    description: "Namespaced classes calling global functions need \\ prefix"
    wrong: "namespace ChurchCRM\\...; MakeFYString($id);"
    correct: "namespace ChurchCRM\\...; \\MakeFYString($id);"
    why: "Without \\, PHP searches current namespace first, causing 'undefined function' errors"
    impact: "500 errors on all family payment list API calls"
    file: "src/ChurchCRM/model/ChurchCRM/Pledge.php line 23"
  
  email_failure_handling:
    description: "Email sending failures should not crash API endpoints"
    pattern_1: "throw new Exception() on send failure -> 500 error in test environment"
    pattern_2: "Log warning + continue -> graceful degradation, 200 response"
    when_to_use: "Pattern 2 for non-critical operations (email), Pattern 1 for critical business logic"
    file: "src/api/routes/users/user-admin.php (password/reset endpoint)"
  
  null_safety:
    description: "Always assume object properties can be null"
    example: "$notification->title ?? 'Notification'"
    impact: "Prevents TypeError when accessing undefined/null properties"
    file: "src/api/routes/system/system.php"

testing_standards_established:
  api_tests_mandatory:
    description: "Create Cypress API tests for all API changes"
    location: "cypress/e2e/api/private/[module]/[service]-[endpoint].spec.js"
    coverage: "Type safety, null safety, validation, error handling, authentication"
    result: "12/12 passing (100% success rate)"
  
  test_isolation:
    description: "Log directory must be clean before tests"
    why: "Old errors in logs mask new failures"
    command: "rm -f src/logs/$(date +%Y-%m-%d)-*.log"
  
  cypress_helpers:
    description: "Use provided helper commands, never raw cy.request()"
    admin: "cy.makePrivateAdminAPICall(method, url, body, expectedStatus)"
    user: "cy.makePrivateUserAPICall(method, url, body, expectedStatus)"
    public: "cy.apiRequest(options) for unauthenticated routes"
    why: "Helpers auto-set Content-Type: application/json header"

performance_improvements:
  before: "Family payment API: 60+ seconds or timeout"
  after: "Family payment API: <200ms response"
  cause: "Fixed MakeFYString undefined function error eliminating 500s"
  ui_test_impact: "UI tests no longer hang waiting for 500 error responses"

files_modified_summary:
  critical_fixes: 7
  middleware_fixes: 6
  route_conversions: 3
  test_suite: 1
  documentation: 1
  total_files: 18
  total_changes: "+472 lines, -147 lines"

ai_notes_location: "ai-notes/COMMIT_SUMMARY.md"
pr_reference: "https://github.com/ChurchCRM/CRM/pull/7421"

---
# Last Updated: 2025-10-25
# Applicable To: All AI agents and coding assistants
# Repository: https://github.com/ChurchCRM/CRM
