name: Locale Term Extraction

on:
  push:
    branches:
      - master
    paths:
      - 'src/**/*.php'
      - 'src/**/*.js'
      - 'src/**/*.jsx'
      - 'src/**/*.ts'
      - 'src/**/*.tsx'
      - 'react/**/*.jsx'
      - 'react/**/*.tsx'
  workflow_dispatch:
    # Allow manual triggering from GitHub UI
    inputs:
      force_pr:
        description: 'Force create PR even if only date changed'
        required: false
        type: boolean
        default: false

jobs:
  extract-terms:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # fetch full history so we can detect meaningful changes
        fetch-depth: 0
        # Use token for write access
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Get package version
      id: package-version
      uses: martinbeentjes/npm-get-version-action@v1.3.1

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install dependencies
      run: npm ci

    - name: Create minimal BuildConfig for term extraction
      run: |
        echo "🔧 Creating minimal BuildConfig.json for term extraction..."
        cat > BuildConfig.json << 'EOF'
        {
            "POEditor": {
                "id": "77079",
                "token": ""
            },
            "GitHub": {
                "token": ""
            },
            "demoKey": "",
            "Env": {
                "local": {
                    "server": "localhost",
                    "database": {
                        "server": "localhost",
                        "port": "3306",
                        "database": "churchcrm",
                        "user": "churchcrm",
                        "password": "changeme"
                    },
                    "admin-api-key": ""
                }
            }
        }
        EOF
        echo "✅ BuildConfig.json created (database not needed for source code extraction)"

    - name: Backup original messages.po
      run: cp locale/messages.po locale/messages.po.backup

    - name: Extract locale terms
      run: |
        echo "🔍 Extracting locale terms from source code..."
        npm run locale:term-extract
        echo "✅ Locale term extraction completed"

    - name: Check for meaningful changes
      id: changes
      run: |
        if [ ! -f "locale/messages.po" ]; then
          echo "❌ messages.po file not found after extraction"
          exit 1
        fi
        
        # Check if file has any changes at all
        if git diff --quiet locale/messages.po; then
          echo "No changes detected in messages.po"
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "meaningful_changes=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Changes detected in messages.po"
        echo "has_changes=true" >> $GITHUB_OUTPUT
        
        # Check if changes are only in the POT-Creation-Date line
        # Create a temporary file with date normalized for comparison
        sed 's/POT-Creation-Date: [^\\]*/POT-Creation-Date: NORMALIZED/' locale/messages.po.backup > /tmp/messages_orig_normalized.po
        sed 's/POT-Creation-Date: [^\\]*/POT-Creation-Date: NORMALIZED/' locale/messages.po > /tmp/messages_new_normalized.po
        
        if diff -q /tmp/messages_orig_normalized.po /tmp/messages_new_normalized.po > /dev/null; then
          echo "Only date changes detected (POT-Creation-Date)"
          echo "meaningful_changes=false" >> $GITHUB_OUTPUT
          
          # Show what actually changed for logging
          echo "🔍 Only POT-Creation-Date changed:"
          git diff locale/messages.po | grep "POT-Creation-Date" || true
        else
          echo "Meaningful changes detected beyond date"
          echo "meaningful_changes=true" >> $GITHUB_OUTPUT
          
          # Show summary of changes
          echo "📊 Change summary:"
          echo "Lines added: $(git diff --numstat locale/messages.po | cut -f1)"
          echo "Lines removed: $(git diff --numstat locale/messages.po | cut -f2)"
          
          # Show first few meaningful changes (exclude date lines)
          echo "🔍 Sample of meaningful changes:"
          git diff locale/messages.po | grep -E "^[+-]" | grep -v "POT-Creation-Date" | head -10 || true
        fi

    - name: Create Pull Request
      if: steps.changes.outputs.meaningful_changes == 'true' || (steps.changes.outputs.has_changes == 'true' && inputs.force_pr)
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: 'locale/term-extract-${{ steps.date.outputs.date }}'
        delete-branch: true
        labels: |
          localization
          automated
          term-extraction
        title: "🔤 Locale Term Extraction - ${{ steps.date.outputs.date }}"
        commit-message: |
          🔤 Extract new locale terms from source code
          
          - Updated messages.po with newly discovered translatable strings
          - Extracted from PHP, JS, JSX, TS, TSX files
          - Date: ${{ steps.date.outputs.date }}
          - Triggered: ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Code changes in master' }}
        body: |
          ## 🔤 Automatic Locale Term Extraction
          
          This PR contains newly discovered translatable strings extracted from the source code.
          
          **Details:**
          - 📅 **Date**: ${{ steps.date.outputs.date }}
          - 🏷️ **Version**: ${{ steps.package-version.outputs.current-version }}
          - 🚀 **Trigger**: ${{ github.event_name == 'workflow_dispatch' && 'Manual run' || 'Source code changes detected' }}
          - 🔍 **Changes**: ${{ steps.changes.outputs.meaningful_changes == 'true' && 'New terms found' || 'Forced PR creation' }}
          
          **What's included:**
          - Updated `locale/messages.po` with new translatable strings
          - Terms extracted from PHP, JavaScript, TypeScript, and React files
          - Ready for translation via POEditor
          
          **Next Steps:**
          1. Review the new strings in `locale/messages.po`
          2. Merge this PR to update the master template
          3. Upload updated template to POEditor for translation
          
          This PR was automatically created by the locale term extraction workflow.
          
          ---
          
          **Manual Run Options:**
          ${{ inputs.force_pr == true && '- 🔄 Forced PR creation (ignoring date-only changes)' || '- 🎯 Standard run (meaningful changes only)' }}

    - name: Report results
      run: |
        echo "## 📊 Locale Term Extraction Results"
        echo "- **Files checked**: PHP, JS, JSX, TS, TSX files in src/ and react/"
        echo "- **Changes detected**: ${{ steps.changes.outputs.has_changes }}"
        echo "- **Meaningful changes**: ${{ steps.changes.outputs.meaningful_changes }}"
        echo "- **PR created**: ${{ (steps.changes.outputs.meaningful_changes == 'true' || (steps.changes.outputs.has_changes == 'true' && inputs.force_pr)) && 'Yes' || 'No' }}"
        echo "- **Branch**: ${{ (steps.changes.outputs.meaningful_changes == 'true' || (steps.changes.outputs.has_changes == 'true' && inputs.force_pr)) && format('locale/term-extract-{0}', steps.date.outputs.date) || 'None' }}"
        echo "- **Trigger**: ${{ github.event_name }}"
        
        if [ "${{ steps.changes.outputs.has_changes }}" == "true" ]; then
          echo ""
          echo "📋 **Changed Files:**"
          git diff --name-only
          
          if [ "${{ steps.changes.outputs.meaningful_changes }}" == "true" ]; then
            echo ""
            echo "🔍 **Change Statistics:**"
            git diff --stat locale/messages.po
          fi
        fi

    - name: Cleanup
      if: always()
      run: |
        # Clean up backup file
        rm -f locale/messages.po.backup
        rm -f /tmp/messages_*_normalized.po