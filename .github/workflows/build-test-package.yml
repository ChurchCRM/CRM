name: Build, Test and Package

on:
  pull_request:
    branches:    
      - master
      - develop
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
  push:
    branches:
    - master
    - develop
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'

jobs:
  test-n-package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x']
    steps:
    - uses: actions/checkout@v4
      with:
        # fetch full history so things like auto-changelog work properly
        fetch-depth: 0
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        # setting a registry enables the NODE_AUTH_TOKEN env variable where we can set an npm token.  REQUIRED
        registry-url: 'https://registry.npmjs.org'

    - name: Declare some variables
      id: vars
      shell: bash
      run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

    - name: get-npm-version
      id: package-version
      uses: martinbeentjes/npm-get-version-action@v1.3.1

    - name: Get Env Ready
      run: |
        npm ci

    - name: Get Composer Cache Directory
      id: composer-cache
      run: |
        cd src
        echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Build App
      run: |
        npm run package

    - name: Run Docker
      run: |
        npm run docker:ci:start
        docker compose -f docker/docker-compose.test-php8-apache.yaml ps -a
        docker compose -f docker/docker-compose.test-php8-apache.yaml logs

    - name: Test Server
      run: |
          curl -vvv http://127.0.0.1/api/public/echo
          docker compose -f docker/docker-compose.test-php8-apache.yaml ps -a
          docker compose -f docker/docker-compose.test-php8-apache.yaml logs

    - name: Run Cypress Tests
      run: |
        npm run test

    - name: Stop Docker
      run: |
        npm run docker:ci:down

    - name: List build artifacts
      run: |
        echo "📦 Build artifacts created:"
        if [ -d "target" ]; then
          ls -la target/
          echo ""
          echo "📊 File sizes:"
          du -h target/*
        else
          echo "❌ No target directory found"
          exit 1
        fi
  
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ChurchCRM-${{ steps.package-version.outputs.current-version }}-${{ steps.vars.outputs.branch }}
        path: target/ChurchCRM-*.zip
        retention-days: 90
        if-no-files-found: error

    - name: Create Release (on master branch)
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.package-version.outputs.current-version }}
        name: ChurchCRM v${{ steps.package-version.outputs.current-version }}
        body: |
          ## ChurchCRM Release v${{ steps.package-version.outputs.current-version }}
          
          ### 📦 Downloads
          - **ChurchCRM-${{ steps.package-version.outputs.current-version }}.zip** - Complete installation package
          
          ### 🚀 Installation
          1. Download the zip file above
          2. Extract to your web server
          3. Follow the [installation guide](https://github.com/ChurchCRM/CRM/wiki/Installation)
          
          ### 📝 Changes
          See the [CHANGELOG.md](https://github.com/ChurchCRM/CRM/blob/master/CHANGELOG.md) for detailed changes in this release.
          
          ---
          *Built automatically from commit ${{ github.sha }}*
        files: target/ChurchCRM-*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Summary
      if: always()
      run: |
        echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**📦 Version:** ${{ steps.package-version.outputs.current-version }}" >> $GITHUB_STEP_SUMMARY
        echo "**🌿 Branch:** ${{ steps.vars.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
        echo "**📝 Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "target" ]; then
          echo "**📦 Artifacts Created:**" >> $GITHUB_STEP_SUMMARY
          for file in target/ChurchCRM-*.zip; do
            if [ -f "$file" ]; then
              size=$(ls -lh "$file" | awk '{print $5}')
              echo "- 📄 \`$(basename "$file")\` ($size)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ github.ref }}" = "refs/heads/master" ] && [ "${{ github.event_name }}" = "push" ]; then
          echo "**🚀 Release Created:** [v${{ steps.package-version.outputs.current-version }}](https://github.com/ChurchCRM/CRM/releases/tag/v${{ steps.package-version.outputs.current-version }})" >> $GITHUB_STEP_SUMMARY
        else
          echo "**📥 Download Artifact:** ChurchCRM-${{ steps.package-version.outputs.current-version }}-${{ steps.vars.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
        fi
