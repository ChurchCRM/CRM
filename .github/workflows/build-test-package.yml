name: Build, Test and Package

on:
  pull_request:
    branches:    
      - master
      - develop
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
  push:
    branches:
    - master
    - develop
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'

jobs:
  test-n-package:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ['20.x']
    steps:
    - uses: actions/checkout@v4
      with:
        # fetch full history so things like auto-changelog work properly
        fetch-depth: 0
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        # setting a registry enables the NODE_AUTH_TOKEN env variable where we can set an npm token.  REQUIRED
        registry-url: 'https://registry.npmjs.org'

    - name: Declare some variables
      id: vars
      shell: bash
      run: |
        # Extract branch name and sanitize for artifact naming
        branch_name="${GITHUB_REF#refs/heads/}"
        # For pull requests, use a cleaner name
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          branch_name="pr-${{ github.event.number }}"
        fi
        # Replace invalid characters for artifact names
        safe_branch=$(echo "$branch_name" | sed 's/[\/\\<>:"|?*]/-/g')
        echo "branch=$branch_name" >> $GITHUB_OUTPUT
        echo "safe_branch=$safe_branch" >> $GITHUB_OUTPUT

    - name: get-npm-version
      id: package-version
      uses: martinbeentjes/npm-get-version-action@v1.3.1

    - name: Get Env Ready
      run: |
        npm ci

    - name: Get Composer Cache Directory
      id: composer-cache
      run: |
        cd src
        echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: Build App
      run: |
        npm run package

    - name: Run Docker
      run: |
        npm run docker:ci:start
        docker compose -f docker/docker-compose.test-php8-apache.yaml ps -a
        docker compose -f docker/docker-compose.test-php8-apache.yaml logs

    - name: Test Server
      run: |
          curl -vvv http://127.0.0.1/api/public/echo
          docker compose -f docker/docker-compose.test-php8-apache.yaml ps -a
          docker compose -f docker/docker-compose.test-php8-apache.yaml logs

    - name: Run Cypress Tests
      run: |
        npm run test

    - name: Stop Docker
      run: |
        npm run docker:ci:down

    - name: List build artifacts
      run: |
        echo "üì¶ Build artifacts created:"
        if [ -d "target" ]; then
          ls -la target/
          echo ""
          echo "üìä File sizes:"
          du -h target/*
        else
          echo "‚ùå No target directory found"
          exit 1
        fi
  
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: >-
          ${{ github.ref == 'refs/heads/master' && 
              format('ChurchCRM-{0}', steps.package-version.outputs.current-version) ||
              (github.event_name == 'pull_request' && 
               format('ChurchCRM-{0}-PR{1}', steps.package-version.outputs.current-version, github.event.number) ||
               format('ChurchCRM-{0}-{1}', steps.package-version.outputs.current-version, steps.vars.outputs.safe_branch)) }}
        path: target/ChurchCRM-*.zip
        retention-days: 90
        if-no-files-found: error

    - name: Check for source code changes
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      id: src-changes
      run: |
        echo "Checking for changes in /src directory..."
        
        # Get the list of changed files in this push
        changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.sha }})
        echo "Changed files:"
        echo "$changed_files"
        
        # Check if any files in src/ directory were changed
        src_changes=$(echo "$changed_files" | grep '^src/' | wc -l)
        
        if [ "$src_changes" -gt 0 ]; then
          echo "‚úÖ Found $src_changes changes in /src directory"
          echo "create_release=true" >> $GITHUB_OUTPUT
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$changed_files" | grep '^src/' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "‚ÑπÔ∏è No changes found in /src directory - skipping release"
          echo "create_release=false" >> $GITHUB_OUTPUT
        fi

    - name: Verify release files before creating draft
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' && steps.src-changes.outputs.create_release == 'true'
      run: |
        echo "üìã Verifying files for draft release..."
        if [ -d "target" ]; then
          echo "‚úÖ Target directory exists"
          ls -la target/
          
          # Find the zip file that will be attached
          zip_files=$(find target -name "ChurchCRM-*.zip" -type f)
          if [ -n "$zip_files" ]; then
            echo "‚úÖ Found zip files to attach:"
            for zip_file in $zip_files; do
              file_size=$(ls -lh "$zip_file" | awk '{print $5}')
              echo "  üì¶ $(basename "$zip_file") ($file_size)"
            done
          else
            echo "‚ùå No ChurchCRM-*.zip files found in target directory!"
            exit 1
          fi
        else
          echo "‚ùå Target directory does not exist!"
          exit 1
        fi

    - name: Create Draft Release (on master with src changes)
      if: github.ref == 'refs/heads/master' && github.event_name == 'push' && steps.src-changes.outputs.create_release == 'true'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.package-version.outputs.current-version }}
        name: ChurchCRM v${{ steps.package-version.outputs.current-version }}
        body: |
          ## ChurchCRM Release v${{ steps.package-version.outputs.current-version }}
          
          ### üì¶ Downloads
          - **ChurchCRM-${{ steps.package-version.outputs.current-version }}.zip** - Complete installation package (attached below)
          
          ### üöÄ Installation
          1. Download the zip file from the "Assets" section below
          2. Extract to your web server directory
          3. Follow the [installation guide](https://github.com/ChurchCRM/CRM/wiki/Installation)
          
          ### üìù Changes in /src Directory
          <!-- TODO: Add detailed release notes here before publishing -->
          
          **Files changed in this release:**
          ```
          ${{ steps.src-changes.outputs.changed_files }}
          ```
          
          **Commit:** ${{ github.sha }}
          
          For detailed changes, see the [CHANGELOG.md](https://github.com/ChurchCRM/CRM/blob/master/CHANGELOG.md) or [compare with previous release](https://github.com/ChurchCRM/CRM/compare/v${{ steps.package-version.outputs.current-version }}).
          
          ### ‚úÖ Testing
          - ‚úÖ All automated tests passed
          - ‚úÖ Build completed successfully
          - ‚úÖ Docker integration tests passed
          - ‚úÖ Cypress end-to-end tests passed
          
          ---
          *Built automatically from commit ${{ github.sha }}*
          
          **Note:** This is a draft release. Review the changes above and publish when ready.
        files: target/ChurchCRM-*.zip
        draft: true
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Summary
      if: always()
      run: |
        echo "## üèóÔ∏è Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**üì¶ Version:** ${{ steps.package-version.outputs.current-version }}" >> $GITHUB_STEP_SUMMARY
        echo "**üåø Branch:** ${{ steps.vars.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
        echo "**üìù Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "target" ]; then
          echo "**üì¶ Artifacts Created:**" >> $GITHUB_STEP_SUMMARY
          for file in target/ChurchCRM-*.zip; do
            if [ -f "$file" ]; then
              size=$(ls -lh "$file" | awk '{print $5}')
              echo "- üìÑ \`$(basename "$file")\` ($size)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ github.ref }}" = "refs/heads/master" ] && [ "${{ github.event_name }}" = "push" ]; then
          echo "**ÔøΩ Draft Release Created:** [v${{ steps.package-version.outputs.current-version }}](https://github.com/ChurchCRM/CRM/releases/tag/v${{ steps.package-version.outputs.current-version }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**üìã Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to [Releases](https://github.com/ChurchCRM/CRM/releases)" >> $GITHUB_STEP_SUMMARY
          echo "2. Edit the draft release notes" >> $GITHUB_STEP_SUMMARY
          echo "3. Add changelog entries" >> $GITHUB_STEP_SUMMARY
          echo "4. Publish the release when ready" >> $GITHUB_STEP_SUMMARY
        else
          artifact_name="${{ github.ref == 'refs/heads/master' && 
                             format('ChurchCRM-{0}', steps.package-version.outputs.current-version) ||
                             (github.event_name == 'pull_request' && 
                              format('ChurchCRM-{0}-PR{1}', steps.package-version.outputs.current-version, github.event.number) ||
                              format('ChurchCRM-{0}-{1}', steps.package-version.outputs.current-version, steps.vars.outputs.safe_branch)) }}"
          echo "**üì• Download Artifact:** $artifact_name" >> $GITHUB_STEP_SUMMARY
        fi
